# -*- coding: utf-8 -*-
"""Dogs vs Cats Image Classification - CNN (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pjX8d26nLH7bpBtSlMWAaLSZSeoVleM_

## Dataset Information

The training archive contains 25,000 images of dogs and cats. Train your algorithm on these files and predict the labels

(1 = dog, 0 = cat).

## Download Dataset
"""

!wget https://download.microsoft.com/download/3/e/1/3e1c3f21-ecdb-4869-8368-6deba77b919f/kagglecatsanddogs_5340.zip

"""## Unzip the Dataset"""

!unzip kagglecatsanddogs_5340.zip

"""## Import Modules"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
import os
import tqdm
import random
from keras.preprocessing.image import load_img
warnings.filterwarnings('ignore')

"""## Create Dataframe for Input and Output"""

import os

input_path = []
label = []

# Check if 'PetImages' directory exists
if os.path.exists("PetImages"):
    for class_name in os.listdir("PetImages"):
        class_path = os.path.join("PetImages", class_name)
        if os.path.isdir(class_path): # Ensure it's a directory
            for path in os.listdir(class_path):
                if class_name == 'Cat':
                    label.append(0)
                else:
                    label.append(1)
                input_path.append(os.path.join(class_path, path))
    if input_path:
        print(input_path[0], label[0])
    else:
        print("No files found in PetImages directory.")
else:
    print("PetImages directory not found.")

df = pd.DataFrame()
df['images'] = input_path
df['label'] = label
df = df.sample(frac=1).reset_index(drop=True)
df.head()

for i in df['images']:
    if '.jpg' not in i:
        print(i)

import PIL
l = []
for image in df['images']:
    try:
        img = PIL.Image.open(image)
    except:
        l.append(image)
l

# delete db files
df = df[df['images']!='PetImages/Dog/Thumbs.db']
df = df[df['images']!='PetImages/Cat/Thumbs.db']
df = df[df['images']!='PetImages/Cat/666.jpg']
df = df[df['images']!='PetImages/Dog/11702.jpg']
len(df)

"""## Exploratory Data Analysis"""

# to display grid of images
plt.figure(figsize=(25,25))
temp = df[df['label']==1]['images']
start = random.randint(0, len(temp))
files = temp[start:start+25]

for index, file in enumerate(files):
    plt.subplot(5,5, index+1)
    img = load_img(file)
    img = np.array(img)
    plt.imshow(img)
    plt.title('Dogs')
    plt.axis('off')

# to display grid of images
plt.figure(figsize=(25,25))
temp = df[df['label']==0]['images']
start = random.randint(0, len(temp))
files = temp[start:start+25]

for index, file in enumerate(files):
    plt.subplot(5,5, index+1)
    img = load_img(file)
    img = np.array(img)
    plt.imshow(img)
    plt.title('Cats')
    plt.axis('off')

import seaborn as sns
sns.countplot(df['label'])

"""## Create DataGenerator for the Images"""

df['label'] = df['label'].astype('str')

df.head()

# input split
from sklearn.model_selection import train_test_split
train, test = train_test_split(df, test_size=0.2, random_state=42)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_generator = ImageDataGenerator(
    rescale = 1./255,  # normalization of images
    rotation_range = 40, # augmention of images to avoid overfitting
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    fill_mode = 'nearest'
)

val_generator = ImageDataGenerator(rescale = 1./255)

train_iterator = train_generator.flow_from_dataframe(
    train,
    x_col='images',
    y_col='label',
    target_size=(128,128),
    batch_size=512,
    class_mode='binary'
)

val_iterator = val_generator.flow_from_dataframe(
    test,
    x_col='images',
    y_col='label',
    target_size=(128,128),
    batch_size=512,
    class_mode='binary'
)

"""## Model Creation"""

from keras import Sequential
from keras.layers import Conv2D, MaxPool2D, Flatten, Dense

model = Sequential([
                    Conv2D(16, (3,3), activation='relu', input_shape=(128,128,3)),
                    MaxPool2D((2,2)),
                    Conv2D(32, (3,3), activation='relu'),
                    MaxPool2D((2,2)),
                    Conv2D(64, (3,3), activation='relu'),
                    MaxPool2D((2,2)),
                    Flatten(),
                    Dense(512, activation='relu'),
                    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(train_iterator, epochs=10, validation_data=val_iterator)

"""## Visualization of Results"""

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs = range(len(acc))

plt.plot(epochs, acc, 'b', label='Training Accuracy')
plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')
plt.title('Accuracy Graph')
plt.legend()
plt.figure()

loss = history.history['loss']
val_loss = history.history['val_loss']
plt.plot(epochs, loss, 'b', label='Training Loss')
plt.plot(epochs, val_loss, 'r', label='Validation Loss')
plt.title('Loss Graph')
plt.legend()
plt.show()

"""## Test with Real Image"""

image_path = "PetImages/Dog/10.jpg" # Using an existing image from the dataset
img = load_img(image_path, target_size=(128, 128))
img = np.array(img)
img = img / 255.0 # normalize the image
img = img.reshape(1, 128, 128, 3) # reshape for prediction
pred = model.predict(img)
if pred[0] > 0.5:
    label = 'Dog'
else:
    label = 'Cat'
print(label)

import PIL
import os

problematic_files = []
for image_path in df['images']:
    try:
        img = PIL.Image.open(image_path)
        img.close() # Close the image file after opening
    except Exception as e:
        print(f"Error opening image file {image_path}: {e}")
        problematic_files.append(image_path)

print(f"\nFound {len(problematic_files)} problematic files:")
for f in problematic_files:
    print(f)

model.save('cats_and_dogs_model.keras')